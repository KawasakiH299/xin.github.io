<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>课本课后习题 on KawasakiH299 Blog</title>
    <link>https://baidu.com/tags/%E8%AF%BE%E6%9C%AC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/</link>
    <description>Recent content in 课本课后习题 on KawasakiH299 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 Feb 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://baidu.com/tags/%E8%AF%BE%E6%9C%AC%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis课后习题（第一章）</title>
      <link>https://baidu.com/post/redis%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://baidu.com/post/redis%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>NoSQL泛指____________数据库。 非关系型&#xA;NoSQL的四大分类是________________、________________、和。 (1) 键值对&#xA;(2) 文档型数据库&#xA;(3) 列存储数据库&#xA;(4) 图形数据库&#xA;数据存储都是基于________________而运行的。 硬件环境&#xA;当单机的储多局限出现后，为了解决数据处理的问题，在两个方向上做了很大的努力：一个是基于服务器本身的_________________；另一个是基于多服务器的________________。 (1) 功能挖掘;纵向扩充&#xA;(2) 横向扩充&#xA;NoSQL与TRDB技术的不同特点：数据存储模式不一样，TRDB为强数据存储模式，NoSQL为_____________TRDB以集中部署一台物理机为最初出发点，NoSQL的核心技术思路是_____________TRDB的事物严格遵循ACID原则，而NoSQL主要遵循_____________ (1) 弱数据存储模式&#xA;(2) 分布式技术;分布式&#xA;(3) BASE原则&#xA;BASE指的是_____________、和 (1) 基本可用&#xA;(2) 软状态&#xA;(3) 最终一致性&#xA;CAP定理要考虑的三个问题是_________________、_________________ (1) 一致性&#xA;(2) 可用性&#xA;(3) 多区容错性&#xA;Redis是一个基于_________________的_________________NoSQL数据库 (1) 内存&#xA;(2) 键值型&#xA;Redis有16个数据库，现在要切换到3号数据库，使用的命令是___________________________（使用小写字母） (1) select 3&#xA;查看当前库中所有的key，使用___________________命令判断k1键是否存储，使用___________________命令删除k1和k2键，使用___________________命令 (1) keys *&#xA;(2) exists k1&#xA;(3) del k1 k2</description>
    </item>
    <item>
      <title>操作系统第三章---处理机调度与死锁</title>
      <link>https://baidu.com/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://baidu.com/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>调度的实质是资源的分配 处理机包括中央处理器（CPU） 主存储器（内存） 输入&amp;mdash;输出接口 和外围设备&#xA;处理机是处理存储程序和数据，并按照程序规定的步骤执行指令的部件&#xA;程序是描述处理机完成某项任务的指令序列&#xA;指令是处理机能直接解释和执行的信息单位&#xA;高级调度和低级调度的主要任务是什么 高级调度的主要任务是：依据某种算法将存在处于后备队列中的哪几个作业调入内存并为它们创建进程，分配必要的资源并将它们放入就绪队列 低级调度的主要任务是：根据某种算法，决定就绪队列中的哪个进程应获得处理机 引入中级调度是为了吧那些暂时不能运行的进程调至外存等待，此时进程的状态称为就绪驻外存 何谓作业和JCB 作业：它包含了通常的程序和数据，而且配有一份作业说明书，系统根据该说明书对进程的运行进行控制&#xA;JCB：作业控制块，它是作业在系统中 存在的标志，目的是为了管理和调度作业&#xA;什么情况下需要使用JCB？其中包含了哪些内容？ 在作业运行期间，系统会按照JCB中的信息和作业说明书对作业进行控制 JCB包含的内容有： 作业标志 用户名称 用户账号 作业类型（CPU繁忙型 I/O繁忙型 批量型 终端型） 作业状态 调度信息（优先级 运行时间） 资源需求情况（预计运行时间 需要内存大小 ） 在作业调度中应如何确定接纳多个作业和接纳哪些作业 能接纳多少个作业取决于多道程序度，其表示允许多少个作业可以同时在内存中运行 接纳哪些作业取决于调度算法 最简单的调度算法是先来先服务算法：它会将最早进入外存的作业优先调入内存 另外一种常用的算法是短作业优先算法：它会将外存上（执行时间）最短的作业优先调入内存 作业优先级调度算法：它会将外存上作业优先级最高的作业优先调入内存 简述引起进程调度的主要原因 在 非抢占式调度方式中，引起进程调度的主要原因有： 正在执行的进程执行完毕或因某事件而使其无法继续运行 正在执行的进程提出I/O请求而暂停执行 在进程通信或同步过程中执行了某种原语操作 在抢占是调度方式中主要依据一定的原则进行调度，主要原则有： 优先级原则 短进程优先原则 时间片原则 何谓静态优先级和动态优先级 静态优先级：是在创建进程时确定的，其在进程的整个运行期间保持不变 动态优先级：是指创建进程之初先赋予进程一个优先级，然后优先级会随进程的推进或等待时间的增加而改变 在基于时间片的RR调度算法中，应如何确定时间片的大小 一个较为可取的时间片大小是略大于一次典型的交互所需要的时间，使大多数交互式进程能在一个时间片内完成 为什么说多级反馈队列调度算法能较好的满足各方面用户的需求 对于终端用户：由于终端型用户提交的作业多属于交互型作业，通常较小，系统只要能使这些作业在第一队列规定的时间片内完成，便可使终端型 短批处理作业用户：对于这类作业，如果可以在第一队列中执行完成，则能获得于终端型作业一样的响应时间，对于稍长的短作业，也可以在第二和第三队列各执行一个时间片即可完成，其周转时间仍然较短 长批处理作业中：将其依次在1，2，3. &amp;hellip;n个队列中运行，然后再按RR方式运行用户不必担心其作业长期得不到处理 为什么实时系统中要求系统（尤其是CPU）具有较强的处理能力 若处理机的处理能力不够强，则有可能因处理机忙不过来而导致某些实时任务不能得到及时的处理 按照调度方式可将实时调度算法分为哪几种？ 可分为抢占式调度算法和非抢占式调度算法 实时系统常用的调度算法有哪些，请分别介绍他们 最早截止时间优先算法 根据任务截止时间确定优先级，任务截止时间越早优先级越高，具有最早截止时间的任务排在队列的最前面 最低松弛度优先算法 在确定任务优先级时，根据的时任务的积极程度（或松弛度），任务紧急程度越高，优先级也就越高 优先级倒置算法 在批处理系统和实时系统 分时系统中各采用哪几种进程（作业）调度算法 未知 什么是死锁？产生死锁的原因和必要条件是什么？如何预防死锁？ 死锁就是进程因不能获得自己所需的资源去继续运行而又无法释放自己当下占有资源，且一直处于这样的僵持状态</description>
    </item>
    <item>
      <title>操作系统第二章---进程的描述与控制</title>
      <link>https://baidu.com/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://baidu.com/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>[toc]&#xA;什么是前趋图？ 用来描述程序执行先后顺序的 是一个无环图，每个节点表示一个进程或一段程序 每个节点的权重用来表示该节点所含有的程序量或程序执行时间 什么是进程？ 是程序执行过程和系统进行资源分配和调度的一个独立单位 进程实体简称进程，进程实体由程序段 相关数据段和进程控制块（PCB）组成 OS中为什么要引入进程？并会产生什么影响？ 为了使程序可以并发执行 并且可以对并发执行的程序加以描述和控制 进程的3种基本状态： 就绪态：是指进程已经处于准备好执行的状态，即进程分配到除CPU以外的执行状态，只要获得CPU便可立即执行 执行态：即进获得CPU后其程序正在执行的状态 阻塞态：正在执行的进程由于某些事件（如I/O请求，申请缓冲区失败等等） 对于任何时刻而言&#xA;在单处理机系统中，只能有一个进程处于执行状态&#xA;在多处理机系统中，可以有多个进程处于执行状态&#xA;为什么要引入进程的挂起状态 为了满足下列需求：&#xA;终端用户需要：终端用户自己的程序在运行期间发现有可疑问题，希望暂停程序运行，以便用户研究其执行情况或对其进行修改 父进程的需要：有时父进程希望挂起自己的某个子进程 负荷调节的需要：当实时系统的工作负荷较重，可能会影响到对实时任务控制时，系统会把一些不重要的进程挂起，以保证自身的正常运行 OS的需要：OS有时希望挂起某些进程，以便检查在进程运行过程中资源的使用情况或进行记账。所记录的信息包括PCU时间，实际时间，作业或进程数量。 叙述组成进程的基本要素，并说明他们的作用 是调度和分派的基本单位 是拥有资源的基本单位 PCB的主要内容有哪些 进程标识符：进程标识符用来标志一个进程，一个进程通常有两种标识符（内部标识符和外部表示符）【内部标识符用于系统内部，外部标识符用于用户】 处理机状态信息：处理机的状态信息也叫上下文 进程调度信息 进程控制信息 发生就绪&amp;mdash;&amp;ndash;运行，运行&amp;mdash;&amp;ndash;阻塞或阻塞&amp;mdash;&amp;ndash;运行状态转换时，OS要使用/修改PCB的进程调度信息的状态位&#xA;试说明引起进程创建的主要事件 用户登录：用户登录成功，则系统会为该用户创建一个进程 作业调度：调度算法调用某个作业时，便会将它装入内存并为它创建进程 提供服务 应用请求 在创建一个新进程时，OS需要完成的主要工作是什么 当出现创建新进程的请求时，OS会调用进程创建原语并按以下步骤创建一个新进程 申请空白的PCB&#xA;为新进程分配所需资源&#xA;初始化PCB&#xA;如果就绪队列能够接纳新进程，则将该进程插入到就绪队列&#xA;试说明引起进程终止的主要事件有哪些 正常结束：任务已经完成，准备退出运行 异常结束：如运行超时 等待超时 算术运算错误 I/O错误 指令错等 外界干预：用户杀死进程 终止一个进程时，OS需要完成的主要工作是什么 首先进程会调用系统终止原语 从PCB中读出该进程的进程状态 若被终止的进程正处于执行状态，则立即终止该进程的执行 若该进程还有子孙进程，则还要终止其所有子孙进程，以防他们成为不可控进程 将被终止的进程所拥有的全部资源归还给其父进程或OS 将被终止的进程的PCB从所在队列（就绪队列 阻塞队列 挂起队列等）中移除 试说明引起进程阻塞或被唤醒的主要事件 向系统请求资源失败&#xA;由于OS无足够的资源分配给该进程，此时进程会因不能继续运行而将自身状态转变为阻塞状态，列如：请求打印机&#xA;等待某种操作的完成&#xA;进程必须在某种操作完成后才能继续执行，在该操作完成之前会被阻塞起来&#xA;新数据尚未到达&#xA;对于相互合作的进程，其中一个进程需要先获得另外一个进程提供的新数据，在未到达之前会被阻塞起来&#xA;等待新任务的到达</description>
    </item>
  </channel>
</rss>
